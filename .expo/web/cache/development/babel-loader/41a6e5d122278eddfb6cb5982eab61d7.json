{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\pc\\\\Desktop\\\\bih360-ejectBuild\\\\app\\\\home\\\\GridRow.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Children } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport _ from 'lodash';\n\nfunction renderPlaceholderViews(count) {\n  return _.times(count, function (index) {\n    return React.createElement(View, {\n      key: \"placeholder-\" + index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 34\n      }\n    });\n  });\n}\n\nvar GridRow = function (_React$Component) {\n  _inherits(GridRow, _React$Component);\n\n  var _super = _createSuper(GridRow);\n\n  function GridRow() {\n    _classCallCheck(this, GridRow);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(GridRow, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          children = _this$props.children,\n          columns = _this$props.columns;\n      var missingElementsCount = columns - Children.count(children);\n      return React.createElement(View, _extends({}, this.props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 7\n        }\n      }), children, renderPlaceholderViews(missingElementsCount));\n    }\n  }]);\n\n  return GridRow;\n}(React.Component);\n\nGridRow.groupByRows = function (data, columns) {\n  var getColumnSpan = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _.constant(1);\n\n  var groupedData = _.reduce(data, function (result, element) {\n    var currentRow = _.last(result.rows);\n\n    var elementSpan = getColumnSpan(element);\n\n    if (!currentRow || result.currentRowSize + elementSpan > columns) {\n      currentRow = [];\n      result.currentRowSize = 0;\n      result.rows.push(currentRow);\n    }\n\n    result.currentRowSize += elementSpan;\n    currentRow.push(element);\n    return result;\n  }, {\n    currentRowSize: 0,\n    rows: []\n  });\n\n  return groupedData.rows;\n};\n\nexport default GridRow;","map":{"version":3,"sources":["C:/Users/pc/Desktop/bih360-ejectBuild/app/home/GridRow.js"],"names":["React","Children","_","renderPlaceholderViews","count","times","index","GridRow","props","children","columns","missingElementsCount","Component","groupByRows","data","getColumnSpan","constant","groupedData","reduce","result","element","currentRow","last","rows","elementSpan","currentRowSize","push"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;AAEA,OAAOC,CAAP,MAAc,QAAd;;AAUA,SAASC,sBAAT,CAAgCC,KAAhC,EAAuC;AACrC,SAAOF,CAAC,CAACG,KAAF,CAAQD,KAAR,EAAe,UAAAE,KAAK;AAAA,WAAI,oBAAC,IAAD;AAAM,MAAA,GAAG,mBAAiBA,KAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAJ;AAAA,GAApB,CAAP;AACD;;IAIKC,O;;;;;;;;;;;;;6BACK;AAAA,wBACuB,KAAKC,KAD5B;AAAA,UACCC,QADD,eACCA,QADD;AAAA,UACWC,OADX,eACWA,OADX;AAEP,UAAMC,oBAAoB,GAAGD,OAAO,GAAGT,QAAQ,CAACG,KAAT,CAAeK,QAAf,CAAvC;AAEA,aACE,oBAAC,IAAD,eAAU,KAAKD,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UACGC,QADH,EAEGN,sBAAsB,CAACQ,oBAAD,CAFzB,CADF;AAMD;;;;EAXmBX,KAAK,CAACY,S;;AA8B5BL,OAAO,CAACM,WAAR,GAAsB,UAACC,IAAD,EAAOJ,OAAP,EAAkD;AAAA,MAAlCK,aAAkC,uEAAlBb,CAAC,CAACc,QAAF,CAAW,CAAX,CAAkB;;AACtE,MAAMC,WAAW,GAAGf,CAAC,CAACgB,MAAF,CAClBJ,IADkB,EAElB,UAACK,MAAD,EAASC,OAAT,EAAqB;AACnB,QAAIC,UAAU,GAAGnB,CAAC,CAACoB,IAAF,CAAOH,MAAM,CAACI,IAAd,CAAjB;;AACA,QAAMC,WAAW,GAAGT,aAAa,CAACK,OAAD,CAAjC;;AAEA,QAAI,CAACC,UAAD,IAAeF,MAAM,CAACM,cAAP,GAAwBD,WAAxB,GAAsCd,OAAzD,EAAkE;AAChEW,MAAAA,UAAU,GAAG,EAAb;AACAF,MAAAA,MAAM,CAACM,cAAP,GAAwB,CAAxB;AACAN,MAAAA,MAAM,CAACI,IAAP,CAAYG,IAAZ,CAAiBL,UAAjB;AACD;;AAEDF,IAAAA,MAAM,CAACM,cAAP,IAAyBD,WAAzB;AACAH,IAAAA,UAAU,CAACK,IAAX,CAAgBN,OAAhB;AACA,WAAOD,MAAP;AACD,GAfiB,EAgBlB;AAAEM,IAAAA,cAAc,EAAE,CAAlB;AAAqBF,IAAAA,IAAI,EAAE;AAA3B,GAhBkB,CAApB;;AAmBA,SAAON,WAAW,CAACM,IAAnB;AACD,CArBD;;AAuBA,eAAehB,OAAf","sourcesContent":["import React, { Children } from 'react';\nimport { View } from 'react-native';\nimport _ from 'lodash';\n\n/**\n * Renders empty placeholder views to fill any empty space\n * left by missing views within a row. This is necessary so that\n * the items in a row remain aligned correctly.\n *\n * @param count Number of placeholders to render\n * @returns {*} Placeholder views\n */\nfunction renderPlaceholderViews(count) {\n  return _.times(count, index => <View key={`placeholder-${index}`} />);\n}\n\n// Ref needed\n// eslint-disable-next-line react/prefer-stateless-function\nclass GridRow extends React.Component {\n  render() {\n    const { children, columns } = this.props;\n    const missingElementsCount = columns - Children.count(children);\n\n    return (\n      <View {...this.props}>\n        {children}\n        {renderPlaceholderViews(missingElementsCount)}\n      </View>\n    );\n  }\n}\n\n/* eslint-disable no-param-reassign */\n/**\n * Groups data into rows for rendering in grid views.\n * Elements may need more than one column in the grid.\n * To accomplish this, a column span can be assigned to\n * each element. The column span of an element determines\n * the number of columns it should occupy.\n *\n * @param data The data elements to group.\n * @param columns The number of columns of the grid.\n * @param getColumnSpan Optional function that returns the\n *   column span of a single element. Each element has a span\n *   of 1 by default.\n * @returns {Array} An array of rows, each row is an array of\n *   data elements.\n */\nGridRow.groupByRows = (data, columns, getColumnSpan = _.constant(1)) => {\n  const groupedData = _.reduce(\n    data,\n    (result, element) => {\n      let currentRow = _.last(result.rows);\n      const elementSpan = getColumnSpan(element);\n\n      if (!currentRow || result.currentRowSize + elementSpan > columns) {\n        currentRow = [];\n        result.currentRowSize = 0;\n        result.rows.push(currentRow);\n      }\n\n      result.currentRowSize += elementSpan;\n      currentRow.push(element);\n      return result;\n    },\n    { currentRowSize: 0, rows: [] },\n  );\n\n  return groupedData.rows;\n};\n\nexport default GridRow;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\pc\\\\Desktop\\\\bih360-ejectBuild\\\\App.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { AppLoading } from 'expo';\nimport { Asset } from 'expo-asset';\nimport * as Font from 'expo-font';\nimport React, { useState } from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport { Ionicons } from '@expo/vector-icons';\nimport Constants from 'expo-constants';\nimport SelectCityScreen from \"./app/SelectCityScreen\";\nexport default function App(props) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoadingComplete = _useState2[0],\n      setLoadingComplete = _useState2[1];\n\n  if (!isLoadingComplete && !props.skipLoadingScreen) {\n    return React.createElement(AppLoading, {\n      startAsync: loadResourcesAsync,\n      onError: handleLoadingError,\n      onFinish: function onFinish() {\n        return handleFinishLoading(setLoadingComplete);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 7\n      }\n    });\n  } else {\n    return React.createElement(SelectCityScreen, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 7\n      }\n    });\n  }\n}\n\nfunction loadResourcesAsync() {\n  return _regeneratorRuntime.async(function loadResourcesAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(Promise.all([Asset.loadAsync([require(\"./assets/icons/home.png\"), require(\"./assets/icons/icon.png\"), require(\"./assets/icons/logo.png\"), require(\"./assets/icons/logowhite.png\"), require(\"./assets/icons/splash.png\")]), Font.loadAsync(_objectSpread(_objectSpread({}, Ionicons.font), {}, {\n            \"Roboto-Regular\": require(\"./assets/fonts/rregular.ttf\"),\n            \"Roboto-Medium\": require(\"./assets/fonts/rmedium.ttf\"),\n            \"Roboto-Light\": require(\"./assets/fonts/rlight.ttf\"),\n            \"Roboto-Bold\": require(\"./assets/fonts/rbold.ttf\")\n          }))]));\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction handleLoadingError(error) {\n  console.warn(error);\n}\n\nfunction handleFinishLoading(setLoadingComplete) {\n  setLoadingComplete(true);\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    paddingTop: Platform.OS === 'ios' ? 20 : 0,\n    flex: 1,\n    backgroundColor: '#fff'\n  }\n});","map":{"version":3,"sources":["C:/Users/pc/Desktop/bih360-ejectBuild/App.js"],"names":["AppLoading","Asset","Font","React","useState","Ionicons","Constants","SelectCityScreen","App","props","isLoadingComplete","setLoadingComplete","skipLoadingScreen","loadResourcesAsync","handleLoadingError","handleFinishLoading","Promise","all","loadAsync","require","font","error","console","warn","styles","StyleSheet","create","container","paddingTop","Platform","OS","flex","backgroundColor"],"mappings":";;;;;;;;;AAAA,SAASA,UAAT,QAA2B,MAA3B;AACA,SAASC,KAAT,QAAsB,YAAtB;AACA,OAAO,KAAKC,IAAZ,MAAsB,WAAtB;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;;;;AAEA,SAASC,QAAT,QAAyB,oBAAzB;AACA,OAAOC,SAAP,MAAsB,gBAAtB;AAEA,OAAOC,gBAAP;AAEA,eAAe,SAASC,GAAT,CAAaC,KAAb,EAAoB;AAAA,kBACeL,QAAQ,CAAC,KAAD,CADvB;AAAA;AAAA,MAC1BM,iBAD0B;AAAA,MACPC,kBADO;;AAGjC,MAAI,CAACD,iBAAD,IAAsB,CAACD,KAAK,CAACG,iBAAjC,EAAoD;AAClD,WACE,oBAAC,UAAD;AACE,MAAA,UAAU,EAAEC,kBADd;AAEE,MAAA,OAAO,EAAEC,kBAFX;AAGE,MAAA,QAAQ,EAAE;AAAA,eAAMC,mBAAmB,CAACJ,kBAAD,CAAzB;AAAA,OAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAOD,GARD,MAQO;AACL,WACE,oBAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAGD;AACF;;AAED,SAAeE,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACQG,OAAO,CAACC,GAAR,CAAY,CAChBhB,KAAK,CAACiB,SAAN,CAAgB,CACdC,OAAO,2BADO,EAEdA,OAAO,2BAFO,EAGdA,OAAO,2BAHO,EAIdA,OAAO,gCAJO,EAKdA,OAAO,6BALO,CAAhB,CADgB,EAQhBjB,IAAI,CAACgB,SAAL,iCACKb,QAAQ,CAACe,IADd;AAEE,8BAAkBD,OAAO,+BAF3B;AAGE,6BAAiBA,OAAO,8BAH1B;AAIE,4BAAgBA,OAAO,6BAJzB;AAKE,2BAAeA,OAAO;AALxB,aARgB,CAAZ,CADR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAmBA,SAASL,kBAAT,CAA4BO,KAA5B,EAAmC;AAGjCC,EAAAA,OAAO,CAACC,IAAR,CAAaF,KAAb;AACD;;AAED,SAASN,mBAAT,CAA6BJ,kBAA7B,EAAiD;AAC/CA,EAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACD;;AAED,IAAMa,MAAM,GAAGC,UAAU,CAACC,MAAX,CAAkB;AAC/BC,EAAAA,SAAS,EAAE;AACTC,IAAAA,UAAU,EAAEC,QAAQ,CAACC,EAAT,KAAgB,KAAjB,GAA0B,EAA1B,GAA+B,CADjC;AAETC,IAAAA,IAAI,EAAE,CAFG;AAGTC,IAAAA,eAAe,EAAE;AAHR;AADoB,CAAlB,CAAf","sourcesContent":["import { AppLoading } from 'expo';\nimport { Asset } from 'expo-asset';\nimport * as Font from 'expo-font';\nimport React, { useState } from 'react';\nimport { Platform, StatusBar, StyleSheet, View, SafeAreaView } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport Constants from 'expo-constants';\n\nimport SelectCityScreen from './app/SelectCityScreen';\n\nexport default function App(props) {\n  const [isLoadingComplete, setLoadingComplete] = useState(false);\n\n  if (!isLoadingComplete && !props.skipLoadingScreen) {\n    return (\n      <AppLoading\n        startAsync={loadResourcesAsync}\n        onError={handleLoadingError}\n        onFinish={() => handleFinishLoading(setLoadingComplete)}\n      />\n    );\n  } else {\n    return (\n      <SelectCityScreen />\n    );\n  }\n}\n\nasync function loadResourcesAsync() {\n  await Promise.all([\n    Asset.loadAsync([\n      require('./assets/icons/home.png'),\n      require('./assets/icons/icon.png'),\n      require('./assets/icons/logo.png'),\n      require('./assets/icons/logowhite.png'),\n      require('./assets/icons/splash.png'),\n    ]),\n    Font.loadAsync({\n      ...Ionicons.font,\n      \"Roboto-Regular\": require(\"./assets/fonts/rregular.ttf\"),\n      \"Roboto-Medium\": require(\"./assets/fonts/rmedium.ttf\"),\n      \"Roboto-Light\": require(\"./assets/fonts/rlight.ttf\"),\n      \"Roboto-Bold\": require(\"./assets/fonts/rbold.ttf\"),\n    }),\n  ]);\n}\n\nfunction handleLoadingError(error) {\n  // In this case, you might want to report the error to your error reporting\n  // service, for example Sentry\n  console.warn(error);\n}\n\nfunction handleFinishLoading(setLoadingComplete) {\n  setLoadingComplete(true);\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingTop:(Platform.OS === 'ios') ? 20 : 0,\n    flex: 1,\n    backgroundColor: '#fff',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}